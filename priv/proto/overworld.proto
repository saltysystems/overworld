syntax = "proto2";

package overworld;


/////////////////////////////////////////////////////////
// Top level message                                   //
/////////////////////////////////////////////////////////
message overworld {
    oneof msg {
        gen_response   gen_response   = 1;
        account_new    account_new    = 2;
        account_login  account_login  = 3;
        session_log    session_log    = 4;
        session_beacon session_beacon = 5;
        session_ping   session_ping   = 6;
        session_pong   session_pong   = 7;
        session_new    session_new    = 8;
        session_id     session_id     = 9;
        session_id_req session_id_req = 10;
        hull_cmd       hull_cmd       = 11;
    }
}


/////////////////////////////////////////////////////////
// General messages                                    //
/////////////////////////////////////////////////////////

message gen_response {
	enum status {
		OK = 0;
		ERROR = 1;
	}
	required status status = 1;
	optional string msg = 2;
}

/////////////////////////////////////////////////////////
// Account Messages                                    //
/////////////////////////////////////////////////////////

message account_new {
	required string email = 1;
	required string password = 2;
}

message account_login {
	required string email = 1;
	required string password = 2;
}

/////////////////////////////////////////////////////////
// Session Messages                                    //
/////////////////////////////////////////////////////////
message session_log {
	required string msg = 1;
    required bytes color = 2;
}

// server -> client
message session_id_req {
}

// server -> client
message session_id {
    required sint32 id = 1;
}

// server --> all clients
message session_beacon {
    required uint32 id = 1;
}

// client --> server
message session_ping {
    required uint32 id = 1;
}

// server -> client
message session_pong {
    // send the most recent estimate for latency
    required uint32 latency = 1;
}

// server -> client
message session_new {
    // initialize a sesison and send to the client. 
    required int64 id = 1; // public
    required bytes reconnect_token = 2; // secret
}

/////////////////////////////////////////////////////////
// Command-oriented Interface                          //
/////////////////////////////////////////////////////////

// text-oriented protocol
message hull_cmd { 
    required string text = 2;
}
